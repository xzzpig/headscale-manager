"""
路由
"""
type Route implements HasID{
	id: ID @goTag(
	key: "bson"
	value: "_id"
)
	"""
	地址
	"""
	name: String
	"""
	描述
	"""
	description: String
	"""
	项目
	"""
	project: Project @goTag(
	key: "bson"
	value: "-"
) @goField(
	forceResolver: true
)
	projectID: ID @goTag(
	key: "bson"
	value: "project"
)
}

"""
项目
"""
type Project implements HasID{
	id: ID @goTag(
	key: "bson"
	value: "_id"
)
	"""
	项目编码
	"""
	code: String
	"""
	项目名称
	"""
	name: String
	"""
	当前机器
	"""
	machine: Machine @goTag(
	key: "bson"
	value: "-"
) @goField(
	forceResolver: true
)
	"""
	可用机器
	"""
	machines: [Machine] @goTag(
	key: "bson"
	value: "-"
) @goField(
	forceResolver: true
)
	"""
	当前机器ID
	"""
	machineID: ID @goTag(
	key: "bson"
	value: "machine"
)
	"""
	可用机器ID
	"""
	machineIDs: [ID] @goTag(
	key: "bson"
	value: "machines"
)
	routes: [Route] @goTag(
	key: "bson"
	value: "-"
) @goField(
	forceResolver: true
)
}

"""
机器
"""
type Machine implements HasID{
	id: ID @goTag(
	key: "bson"
	value: "_id"
)
	"""
	名称
	"""
	name: String
}

"""
项目路由同步结果
"""
type SyncResult{
	projectID: ID!
	project: Project @goField(
	forceResolver: true
)
	routeID: ID!
	route: Route @goField(
	forceResolver: true
)
	machineID: ID!
	machine: Machine @goField(
	forceResolver: true
)
	"""
	路由是否启用
	"""
	routeEnable: Boolean!
}

type Timestamp{
	seconds: Int!
	nanos: Int!
}

"""
用户信息
"""
type UserInfo{
	name: String!
	email: String!
	groups: [String!]!
	isAdmin: Boolean @goField(
	name: "isAdmin"
	forceResolver: true
) @goTag(
	key: "json"
	value: "-"
)
}

"""
Headscale Machine
"""
type HMachine{
	id: Int!
	ipAddresses: [String!]! @goTag(
	key: "json"
	value: "ip_addresses,omitempty"
)
	name: String!
	lastSeen: Timestamp @goTag(
	key: "json"
	value: "last_seen,omitempty"
)
	forcedTags: [String!]! @goTag(
	key: "json"
	value: "forced_tags,omitempty"
)
	givenName: String! @goTag(
	key: "json"
	value: "given_name,omitempty"
)
	online: Boolean!
	user: HUser
	routes: [HRoute!]! @goField(
	forceResolver: true
)
}

"""
Headscale User
"""
type HUser{
	id: String!
	name: String!
	createdAt: Timestamp @goTag(
	key: "json"
	value: "created_at,omitempty"
)
}

type HRoute{
	id: Int!
	machine: HMachine @goField(
	forceResolver: true
)
	prefix: String!
	advertised: Boolean!
	enabled: Boolean!
	isPrimary: Boolean! @goTag(
	key: "json"
	value: "is_primary,omitempty"
)
	createdAt: Timestamp @goTag(
	key: "json"
	value: "created_at,omitempty"
)
	updatedAt: Timestamp @goTag(
	key: "json"
	value: "updated_at,omitempty"
)
	deletedAt: Timestamp @goTag(
	key: "json"
	value: "deleted_at,omitempty"
)
}

type HeadscaleQuery{
	machines: [HMachine!]! @goField(
	forceResolver: true
)
	machine(
		machineId: Int!
	): HMachine @goField(
	forceResolver: true
)
	users: [HUser!]! @goField(forceResolver: true) @needAdmin
}

type Query{
	userInfo: UserInfo!
	projects: [Project] @needAdmin
	machines: [Machine] @needAdmin
	routes: [Route] @needAdmin
	headscale: HeadscaleQuery @goField(
	forceResolver: true
)
}

type Mutation{
	project: ProjectMutation @needAdmin(quiet: false)
	route: RouteMutation @needAdmin(quiet: false)
	machine: MachineMutation @needAdmin(quiet: false)
	headscale: HeadscaleMutation
	acl: ACLMutation @needAdmin(quiet: false)
}

type ACLMutation{
	triggerUpdate: Boolean! @goField(
	forceResolver: true
)	
}

type ProjectMutation{
	saveProject(
		projectInput: ProjectInput
	): Project @goField(
	forceResolver: true
)
	deleteProject(
		id: ID!
	): Int! @goField(
	forceResolver: true
)
	syncProjectRoute(
		projectID: ID
	): [SyncResult!] @goField(
	forceResolver: true
)
}

type RouteMutation{
	saveRoute(
		routeInput: RouteInput
	): Route @goField(
	forceResolver: true
)
	deleteRoute(
		id: ID!
	): Int! @goField(
	forceResolver: true
)
}

type MachineMutation{
	saveMachine(
		machineInput: MachineInput
	): Machine @goField(
	forceResolver: true
)
	deleteMachine(
		id: ID!
	): Int! @goField(
	forceResolver: true
)
}

type HeadscaleMutation{
	route: HRouteMutation @needAdmin(quiet: false)
	machine: HMachineMutation 
	user: HUserMutation @needAdmin(quiet: false)
}

type HRouteMutation{
	enableRoute(
		routeId: Int!
		enable: Boolean!
	): Boolean! @goField(
	forceResolver: true
)
	deleteRoute(
		routeId: Int!
	): Boolean! @goField(
	forceResolver: true
)
}

type HMachineMutation{
	renameMachine(
		machineId: Int!
		name: String!
	): HMachine! @goField(
	forceResolver: true
)
	deleteMachine(
		machineId: Int!
	): Boolean! @goField(
	forceResolver: true
)
	setMachineTags(
		machineId: Int!
		tags: [String!]!
	): HMachine! @goField(
	forceResolver: true
)
	moveMachine(
		machineId: Int!
		userName: String!
	): HMachine! @goField(
	forceResolver: true
) @needAdmin(quiet: false)
}

type HUserMutation{
	createUser(
		name: String!
	): HUser! @goField(
	forceResolver: true
)
	deleteUser(
		name: String!
	): Boolean! @goField(
	forceResolver: true
)
	renameUser(
		oldName: String!
		newName: String!
	): HUser! @goField(
	forceResolver: true
)
}

input ProjectInput{
	id: ID
	code: String
	name: String
	machineID: ID
	machineIDs: [String]
}

input RouteInput{
	id: ID
	name: String
	description: String
	projectID: ID
}

input MachineInput{
	id: ID
	name: String
}

directive @goTag(
	key: String!
	value: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

directive @goField(
	forceResolver: Boolean
	name: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

directive @needAdmin(
	quiet: Boolean! = true
) on FIELD_DEFINITION

interface HasID{
	id: ID
}
schema{
	query: Query,
	mutation: Mutation
}