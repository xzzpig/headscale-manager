package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.28

import (
	"context"

	"github.com/xzzpig/headscale-manager/graph/model"
	"github.com/xzzpig/headscale-manager/service"
)

// SaveMachine is the resolver for the saveMachine field.
func (r *machineMutationResolver) SaveMachine(ctx context.Context, obj *model.MachineMutation, machineInput *model.MachineInput) (*model.Machine, error) {
	svc := service.NewMachineService(ctx)
	id, err := svc.Save(machineInput)
	if err != nil {
		return nil, err
	}
	return svc.ByIDWithLoader(&id)
}

// DeleteMachine is the resolver for the deleteMachine field.
func (r *machineMutationResolver) DeleteMachine(ctx context.Context, obj *model.MachineMutation, id string) (int, error) {
	svc := service.NewMachineService(ctx)
	count, err := svc.Delete(id)
	if err != nil {
		return 0, err
	}
	return int(count), nil
}

// Project is the resolver for the project field.
func (r *mutationResolver) Project(ctx context.Context) (*model.ProjectMutation, error) {
	return &model.ProjectMutation{}, nil
}

// Route is the resolver for the route field.
func (r *mutationResolver) Route(ctx context.Context) (*model.RouteMutation, error) {
	return &model.RouteMutation{}, nil
}

// Machine is the resolver for the machine field.
func (r *mutationResolver) Machine(ctx context.Context) (*model.MachineMutation, error) {
	return &model.MachineMutation{}, nil
}

// Machine is the resolver for the machine field.
func (r *projectResolver) Machine(ctx context.Context, obj *model.Project) (*model.Machine, error) {
	svc := service.NewMachineService(ctx)
	return svc.ByIDWithLoader(obj.MachineID)
}

// Machines is the resolver for the machines field.
func (r *projectResolver) Machines(ctx context.Context, obj *model.Project) ([]*model.Machine, error) {
	svc := service.NewMachineService(ctx)
	return svc.ByIDsWithLoader(obj.MachineIDs)
}

// Routes is the resolver for the routes field.
func (r *projectResolver) Routes(ctx context.Context, obj *model.Project) ([]*model.Route, error) {
	svc := service.NewRouteService(ctx)
	return svc.ProjectRoutes(obj.ID)
}

// SaveProject is the resolver for the saveProject field.
func (r *projectMutationResolver) SaveProject(ctx context.Context, obj *model.ProjectMutation, projectInput *model.ProjectInput) (*model.Project, error) {
	svc := service.NewProjectService(ctx)
	id, err := svc.Save(projectInput)
	if err != nil {
		return nil, err
	}
	return svc.ByIDWithLoader(&id)
}

// DeleteProject is the resolver for the deleteProject field.
func (r *projectMutationResolver) DeleteProject(ctx context.Context, obj *model.ProjectMutation, id string) (int, error) {
	svc := service.NewProjectService(ctx)
	count, err := svc.Delete(id)
	return int(count), err
}

// SyncProjectRoute is the resolver for the syncProjectRoute field.
func (r *projectMutationResolver) SyncProjectRoute(ctx context.Context, obj *model.ProjectMutation, projectID *string) ([]*model.SyncResult, error) {
	svc := service.NewProjectService(ctx)
	return svc.SyncProjectRoute(projectID)
}

// Projects is the resolver for the projects field.
func (r *queryResolver) Projects(ctx context.Context) ([]*model.Project, error) {
	svc := service.NewProjectService(ctx)
	return svc.All()
}

// Machines is the resolver for the machines field.
func (r *queryResolver) Machines(ctx context.Context) ([]*model.Machine, error) {
	svc := service.NewMachineService(ctx)
	return svc.All()
}

// Routes is the resolver for the routes field.
func (r *queryResolver) Routes(ctx context.Context) ([]*model.Route, error) {
	svc := service.NewRouteService(ctx)
	return svc.All()
}

// Project is the resolver for the project field.
func (r *routeResolver) Project(ctx context.Context, obj *model.Route) (*model.Project, error) {
	svc := service.NewProjectService(ctx)
	return svc.ByIDWithLoader(obj.ProjectID)
}

// SaveRoute is the resolver for the saveRoute field.
func (r *routeMutationResolver) SaveRoute(ctx context.Context, obj *model.RouteMutation, routeInput *model.RouteInput) (*model.Route, error) {
	svc := service.NewRouteService(ctx)
	id, err := svc.Save(routeInput)
	if err != nil {
		return nil, err
	}
	return svc.ByIDWithLoader(&id)
}

// DeleteRoute is the resolver for the deleteRoute field.
func (r *routeMutationResolver) DeleteRoute(ctx context.Context, obj *model.RouteMutation, id string) (int, error) {
	svc := service.NewRouteService(ctx)
	count, err := svc.Delete(id)
	return int(count), err
}

// Project is the resolver for the project field.
func (r *syncResultResolver) Project(ctx context.Context, obj *model.SyncResult) (*model.Project, error) {
	svc := service.NewProjectService(ctx)
	return svc.ByIDWithLoader(&obj.ProjectID)
}

// Route is the resolver for the route field.
func (r *syncResultResolver) Route(ctx context.Context, obj *model.SyncResult) (*model.Route, error) {
	svc := service.NewRouteService(ctx)
	return svc.ByIDWithLoader(&obj.RouteID)
}

// Machine is the resolver for the machine field.
func (r *syncResultResolver) Machine(ctx context.Context, obj *model.SyncResult) (*model.Machine, error) {
	svc := service.NewMachineService(ctx)
	return svc.ByIDWithLoader(&obj.MachineID)
}

// MachineMutation returns MachineMutationResolver implementation.
func (r *Resolver) MachineMutation() MachineMutationResolver { return &machineMutationResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Project returns ProjectResolver implementation.
func (r *Resolver) Project() ProjectResolver { return &projectResolver{r} }

// ProjectMutation returns ProjectMutationResolver implementation.
func (r *Resolver) ProjectMutation() ProjectMutationResolver { return &projectMutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Route returns RouteResolver implementation.
func (r *Resolver) Route() RouteResolver { return &routeResolver{r} }

// RouteMutation returns RouteMutationResolver implementation.
func (r *Resolver) RouteMutation() RouteMutationResolver { return &routeMutationResolver{r} }

// SyncResult returns SyncResultResolver implementation.
func (r *Resolver) SyncResult() SyncResultResolver { return &syncResultResolver{r} }

type machineMutationResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type projectResolver struct{ *Resolver }
type projectMutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type routeResolver struct{ *Resolver }
type routeMutationResolver struct{ *Resolver }
type syncResultResolver struct{ *Resolver }
