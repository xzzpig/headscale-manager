package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"

	"github.com/xzzpig/headscale-manager/api/headscale"
	"github.com/xzzpig/headscale-manager/graph/model"
	"github.com/xzzpig/headscale-manager/service"
)

// Routes is the resolver for the routes field.
func (r *hMachineResolver) Routes(ctx context.Context, obj *model.HMachine) ([]*model.HRoute, error) {
	result, err := headscale.Client.ListMachineRoutes(uint64(obj.ID))
	if err != nil {
		return nil, err
	}
	routes := make([]*model.HRoute, len(result.Routes))
	for i, r := range result.Routes {
		routes[i] = model.ToHRoute(r)
	}
	return routes, nil
}

// RenameMachine is the resolver for the renameMachine field.
func (r *hMachineMutationResolver) RenameMachine(ctx context.Context, obj *model.HMachineMutation, machineID int, name string) (*model.HMachine, error) {
	res, err := headscale.Client.RenameMachine(uint64(machineID), name)
	if err != nil {
		return nil, err
	}
	return model.ToHMachine(res.Machine), nil
}

// DeleteMachine is the resolver for the deleteMachine field.
func (r *hMachineMutationResolver) DeleteMachine(ctx context.Context, obj *model.HMachineMutation, machineID int) (bool, error) {
	err := headscale.Client.DeleteMachine(uint64(machineID))
	if err != nil {
		return false, err
	}
	return true, nil
}

// SetMachineTags is the resolver for the setMachineTags field.
func (r *hMachineMutationResolver) SetMachineTags(ctx context.Context, obj *model.HMachineMutation, machineID int, tags []string) (*model.HMachine, error) {
	res, err := headscale.Client.SetMachineTags(uint64(machineID), tags)
	if err != nil {
		return nil, err
	}
	return model.ToHMachine(res.Machine), nil
}

// MoveMachine is the resolver for the moveMachine field.
func (r *hMachineMutationResolver) MoveMachine(ctx context.Context, obj *model.HMachineMutation, machineID int, userName string) (*model.HMachine, error) {
	res, err := headscale.Client.MoveMachine(uint64(machineID), userName)
	if err != nil {
		return nil, err
	}
	return model.ToHMachine(res.Machine), nil
}

// Machine is the resolver for the machine field.
func (r *hRouteResolver) Machine(ctx context.Context, obj *model.HRoute) (*model.HMachine, error) {
	panic(fmt.Errorf("not implemented: Machine - machine"))
}

// EnableRoute is the resolver for the enableRoute field.
func (r *hRouteMutationResolver) EnableRoute(ctx context.Context, obj *model.HRouteMutation, routeID int, enable bool) (bool, error) {
	err := headscale.Client.EnableRoute(uint64(routeID), enable)
	if err != nil {
		return false, err
	}
	return true, nil
}

// DeleteRoute is the resolver for the deleteRoute field.
func (r *hRouteMutationResolver) DeleteRoute(ctx context.Context, obj *model.HRouteMutation, routeID int) (bool, error) {
	err := headscale.Client.DeleteRoute(uint64(routeID))
	if err != nil {
		return false, err
	}
	return true, nil
}

// CreateUser is the resolver for the createUser field.
func (r *hUserMutationResolver) CreateUser(ctx context.Context, obj *model.HUserMutation, name string) (*model.HUser, error) {
	res, err := headscale.Client.CreateUser(name)
	if err != nil {
		return nil, err
	}
	return model.ToHUser(res.User), nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *hUserMutationResolver) DeleteUser(ctx context.Context, obj *model.HUserMutation, name string) (bool, error) {
	err := headscale.Client.DeleteUser(name)
	if err != nil {
		return false, err
	}
	return true, nil
}

// RenameUser is the resolver for the renameUser field.
func (r *hUserMutationResolver) RenameUser(ctx context.Context, obj *model.HUserMutation, oldName string, newName string) (*model.HUser, error) {
	res, err := headscale.Client.RenameUser(oldName, newName)
	if err != nil {
		return nil, err
	}
	return model.ToHUser(res.User), nil
}

// Machines is the resolver for the machines field.
func (r *headscaleQueryResolver) Machines(ctx context.Context, obj *model.HeadscaleQuery) ([]*model.HMachine, error) {
	result, err := headscale.Client.ListMachines()
	if err != nil {
		return nil, err
	}
	machines := make([]*model.HMachine, len(result.Machines))
	for i, m := range result.Machines {
		machines[i] = model.ToHMachine(m)
	}
	return machines, nil
}

// Machine is the resolver for the machine field.
func (r *headscaleQueryResolver) Machine(ctx context.Context, obj *model.HeadscaleQuery, machineID int) (*model.HMachine, error) {
	result, err := headscale.Client.GetMachine(uint64(machineID))
	if err != nil {
		return nil, err
	}
	return model.ToHMachine(result.Machine), nil
}

// Users is the resolver for the users field.
func (r *headscaleQueryResolver) Users(ctx context.Context, obj *model.HeadscaleQuery) ([]*model.HUser, error) {
	result, err := headscale.Client.ListUsers()
	if err != nil {
		return nil, err
	}
	users := make([]*model.HUser, len(result.Users))
	for i, u := range result.Users {
		users[i] = model.ToHUser(u)
	}
	return users, nil
}

// SaveMachine is the resolver for the saveMachine field.
func (r *machineMutationResolver) SaveMachine(ctx context.Context, obj *model.MachineMutation, machineInput *model.MachineInput) (*model.Machine, error) {
	svc := service.NewMachineService(ctx)
	id, err := svc.Save(machineInput)
	if err != nil {
		return nil, err
	}
	return svc.ByIDWithLoader(&id)
}

// DeleteMachine is the resolver for the deleteMachine field.
func (r *machineMutationResolver) DeleteMachine(ctx context.Context, obj *model.MachineMutation, id string) (int, error) {
	svc := service.NewMachineService(ctx)
	count, err := svc.Delete(id)
	if err != nil {
		return 0, err
	}
	return int(count), nil
}

// Project is the resolver for the project field.
func (r *mutationResolver) Project(ctx context.Context) (*model.ProjectMutation, error) {
	return &model.ProjectMutation{}, nil
}

// Route is the resolver for the route field.
func (r *mutationResolver) Route(ctx context.Context) (*model.RouteMutation, error) {
	return &model.RouteMutation{}, nil
}

// Machine is the resolver for the machine field.
func (r *mutationResolver) Machine(ctx context.Context) (*model.MachineMutation, error) {
	return &model.MachineMutation{}, nil
}

// Headscale is the resolver for the headscale field.
func (r *mutationResolver) Headscale(ctx context.Context) (*model.HeadscaleMutation, error) {
	return &model.HeadscaleMutation{
		Machine: &model.HMachineMutation{},
		Route:   &model.HRouteMutation{},
		User:    &model.HUserMutation{},
	}, nil
}

// Machine is the resolver for the machine field.
func (r *projectResolver) Machine(ctx context.Context, obj *model.Project) (*model.Machine, error) {
	svc := service.NewMachineService(ctx)
	return svc.ByIDWithLoader(obj.MachineID)
}

// Machines is the resolver for the machines field.
func (r *projectResolver) Machines(ctx context.Context, obj *model.Project) ([]*model.Machine, error) {
	svc := service.NewMachineService(ctx)
	return svc.ByIDsWithLoader(obj.MachineIDs)
}

// Routes is the resolver for the routes field.
func (r *projectResolver) Routes(ctx context.Context, obj *model.Project) ([]*model.Route, error) {
	svc := service.NewRouteService(ctx)
	return svc.ProjectRoutes(obj.ID)
}

// SaveProject is the resolver for the saveProject field.
func (r *projectMutationResolver) SaveProject(ctx context.Context, obj *model.ProjectMutation, projectInput *model.ProjectInput) (*model.Project, error) {
	svc := service.NewProjectService(ctx)
	id, err := svc.Save(projectInput)
	if err != nil {
		return nil, err
	}
	return svc.ByIDWithLoader(&id)
}

// DeleteProject is the resolver for the deleteProject field.
func (r *projectMutationResolver) DeleteProject(ctx context.Context, obj *model.ProjectMutation, id string) (int, error) {
	svc := service.NewProjectService(ctx)
	count, err := svc.Delete(id)
	return int(count), err
}

// SyncProjectRoute is the resolver for the syncProjectRoute field.
func (r *projectMutationResolver) SyncProjectRoute(ctx context.Context, obj *model.ProjectMutation, projectID *string) ([]*model.SyncResult, error) {
	svc := service.NewProjectService(ctx)
	return svc.SyncProjectRoute(projectID)
}

// Projects is the resolver for the projects field.
func (r *queryResolver) Projects(ctx context.Context) ([]*model.Project, error) {
	svc := service.NewProjectService(ctx)
	return svc.All()
}

// Machines is the resolver for the machines field.
func (r *queryResolver) Machines(ctx context.Context) ([]*model.Machine, error) {
	svc := service.NewMachineService(ctx)
	return svc.All()
}

// Routes is the resolver for the routes field.
func (r *queryResolver) Routes(ctx context.Context) ([]*model.Route, error) {
	svc := service.NewRouteService(ctx)
	return svc.All()
}

// Headscale is the resolver for the headscale field.
func (r *queryResolver) Headscale(ctx context.Context) (*model.HeadscaleQuery, error) {
	return &model.HeadscaleQuery{}, nil
}

// Project is the resolver for the project field.
func (r *routeResolver) Project(ctx context.Context, obj *model.Route) (*model.Project, error) {
	svc := service.NewProjectService(ctx)
	return svc.ByIDWithLoader(obj.ProjectID)
}

// SaveRoute is the resolver for the saveRoute field.
func (r *routeMutationResolver) SaveRoute(ctx context.Context, obj *model.RouteMutation, routeInput *model.RouteInput) (*model.Route, error) {
	svc := service.NewRouteService(ctx)
	id, err := svc.Save(routeInput)
	if err != nil {
		return nil, err
	}
	return svc.ByIDWithLoader(&id)
}

// DeleteRoute is the resolver for the deleteRoute field.
func (r *routeMutationResolver) DeleteRoute(ctx context.Context, obj *model.RouteMutation, id string) (int, error) {
	svc := service.NewRouteService(ctx)
	count, err := svc.Delete(id)
	return int(count), err
}

// Project is the resolver for the project field.
func (r *syncResultResolver) Project(ctx context.Context, obj *model.SyncResult) (*model.Project, error) {
	svc := service.NewProjectService(ctx)
	return svc.ByIDWithLoader(&obj.ProjectID)
}

// Route is the resolver for the route field.
func (r *syncResultResolver) Route(ctx context.Context, obj *model.SyncResult) (*model.Route, error) {
	svc := service.NewRouteService(ctx)
	return svc.ByIDWithLoader(&obj.RouteID)
}

// Machine is the resolver for the machine field.
func (r *syncResultResolver) Machine(ctx context.Context, obj *model.SyncResult) (*model.Machine, error) {
	svc := service.NewMachineService(ctx)
	return svc.ByIDWithLoader(&obj.MachineID)
}

// HMachine returns HMachineResolver implementation.
func (r *Resolver) HMachine() HMachineResolver { return &hMachineResolver{r} }

// HMachineMutation returns HMachineMutationResolver implementation.
func (r *Resolver) HMachineMutation() HMachineMutationResolver { return &hMachineMutationResolver{r} }

// HRoute returns HRouteResolver implementation.
func (r *Resolver) HRoute() HRouteResolver { return &hRouteResolver{r} }

// HRouteMutation returns HRouteMutationResolver implementation.
func (r *Resolver) HRouteMutation() HRouteMutationResolver { return &hRouteMutationResolver{r} }

// HUserMutation returns HUserMutationResolver implementation.
func (r *Resolver) HUserMutation() HUserMutationResolver { return &hUserMutationResolver{r} }

// HeadscaleQuery returns HeadscaleQueryResolver implementation.
func (r *Resolver) HeadscaleQuery() HeadscaleQueryResolver { return &headscaleQueryResolver{r} }

// MachineMutation returns MachineMutationResolver implementation.
func (r *Resolver) MachineMutation() MachineMutationResolver { return &machineMutationResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Project returns ProjectResolver implementation.
func (r *Resolver) Project() ProjectResolver { return &projectResolver{r} }

// ProjectMutation returns ProjectMutationResolver implementation.
func (r *Resolver) ProjectMutation() ProjectMutationResolver { return &projectMutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Route returns RouteResolver implementation.
func (r *Resolver) Route() RouteResolver { return &routeResolver{r} }

// RouteMutation returns RouteMutationResolver implementation.
func (r *Resolver) RouteMutation() RouteMutationResolver { return &routeMutationResolver{r} }

// SyncResult returns SyncResultResolver implementation.
func (r *Resolver) SyncResult() SyncResultResolver { return &syncResultResolver{r} }

type hMachineResolver struct{ *Resolver }
type hMachineMutationResolver struct{ *Resolver }
type hRouteResolver struct{ *Resolver }
type hRouteMutationResolver struct{ *Resolver }
type hUserMutationResolver struct{ *Resolver }
type headscaleQueryResolver struct{ *Resolver }
type machineMutationResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type projectResolver struct{ *Resolver }
type projectMutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type routeResolver struct{ *Resolver }
type routeMutationResolver struct{ *Resolver }
type syncResultResolver struct{ *Resolver }
